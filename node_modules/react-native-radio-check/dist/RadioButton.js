"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioGroup = void 0;
const React = require("react");
const react_native_1 = require("react-native");
class RadioButton extends React.Component {
    parent;
    constructor(props) {
        super(props);
        this.state = { checked: props.checked == true };
    }
    shouldComponentUpdate(nextProps, nextState, nextContext) {
        const nextPropsChecked = nextProps.checked == true;
        if (this.props.checked != nextProps.checked && this.state.checked != nextPropsChecked) {
            this.setState({ checked: nextPropsChecked }, () => {
                this.props.onChecked && this.props.onChecked(this.state.checked, false);
                if (this.state.checked) {
                    if (this.parent) {
                        this.parent.onCheck(this.props.id, this.props.value);
                    }
                }
            });
            return false;
        }
        return true;
    }
    render() {
        let checked = this.state.checked;
        return (<react_native_1.TouchableWithoutFeedback disabled={this.props.disabled} onPress={() => {
                if (!checked) {
                    this.setState({ checked: true }, () => {
                        this.props.onChecked && this.props.onChecked(true, true);
                        if (this.parent) {
                            this.parent.onCheck(this.props.id, this.props.value);
                        }
                    });
                }
            }}>
        <react_native_1.View style={[styles.radioContainer, this.props.style]}>
          {this.renderRadio(checked)}
          {this.renderText(checked)}
          {this.getContextInfo()}
        </react_native_1.View>
      </react_native_1.TouchableWithoutFeedback>);
    }
    renderRadio(checked) {
        let icons = this.props.icon;
        if (icons) {
            return (<react_native_1.Image style={this.props.iconStyle} source={checked ? icons.checked : icons.normal}/>);
        }
    }
    renderText(checked) {
        if (this.props.text) {
            return (<react_native_1.Text style={[styles.label, this.props.textStyle, checked ? this.props.textCheckedStyle : null]}>{this.props.text}</react_native_1.Text>);
        }
    }
    getContextInfo() {
        return (<contextRadioGroup.Consumer>
        {value => {
                this.parent = value.root;
                return null;
            }}
      </contextRadioGroup.Consumer>);
    }
}
exports.default = RadioButton;
class RadioGroup extends React.Component {
    constructor(props) {
        super(props);
        this.state = { checkedId: this.props.checkedId };
    }
    onCheck(id, value) {
        if (this.state.checkedId != id) {
            this.setState({ checkedId: id });
        }
        this.props.onChecked && this.props.onChecked(id, value);
    }
    shouldComponentUpdate(nextProps, nextState, nextContext) {
        if (this.props.checkedId != nextProps.checkedId && this.state.checkedId != nextProps.checkedId) {
            this.setState({ checkedId: nextProps.checkedId });
            return false;
        }
        return true;
    }
    render() {
        return (<react_native_1.View style={this.props.style}>
        {this.renderChildren()}
      </react_native_1.View>);
    }
    renderChildren() {
        return React.Children.map(this.props.children, (child, index) => {
            if (React.isValidElement(child) && child.type.toString() === RadioButton.toString()) {
                let tempId = child.props.id ? child.props.id : index;
                return (<contextRadioGroup.Provider value={{ root: this }}>
            <RadioButton icon={this.props.icon} iconStyle={this.props.iconStyle} textStyle={this.props.textStyle} textCheckedStyle={this.props.textCheckedStyle} {...child.props} id={tempId} group={this} checked={this.state.checkedId == tempId}/>
          </contextRadioGroup.Provider>);
            }
            return child;
        });
    }
}
exports.RadioGroup = RadioGroup;
const contextRadioGroup = React.createContext({});
const styles = react_native_1.StyleSheet.create({
    radioContainer: {
        flexDirection: 'row',
        alignItems: 'center'
    },
    label: {
        fontSize: 14,
        color: '#606266',
        includeFontPadding: false
    },
});
