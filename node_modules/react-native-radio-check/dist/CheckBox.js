"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
class CheckBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = { checked: props.checked == true };
    }
    shouldComponentUpdate(nextProps, nextState, nextContext) {
        if (this.props.checked != nextProps.checked && this.state.checked != nextProps.checked) {
            this.setState({ checked: nextProps.checked == true }, () => {
                this.props.onChecked && this.props.onChecked(this.state.checked, false);
            });
            return false;
        }
        return true;
    }
    render() {
        return (<react_native_1.TouchableWithoutFeedback disabled={this.props.disabled} onPress={() => {
                this.setState({ checked: !this.state.checked }, () => {
                    this.props.onChecked && this.props.onChecked(this.state.checked, true);
                });
            }}>
        <react_native_1.View style={[styles.checkContainer, this.props.style]}>
          {this.renderCheckBtn(this.state.checked)}
          {this.renderText(this.state.checked)}
        </react_native_1.View>
      </react_native_1.TouchableWithoutFeedback>);
    }
    renderCheckBtn(checked) {
        let icons = this.props.icon;
        if (icons) {
            return (<react_native_1.Image style={this.props.iconStyle} source={checked ? icons.checked : icons.normal}/>);
        }
    }
    renderText(checked) {
        if (this.props.text) {
            return (<react_native_1.Text style={[styles.label, this.props.textStyle, checked ? this.props.textCheckedStyle : null]}>{this.props.text}</react_native_1.Text>);
        }
    }
}
exports.default = CheckBox;
const styles = react_native_1.StyleSheet.create({
    checkContainer: {
        flexDirection: 'row',
        alignItems: 'center'
    },
    label: {
        fontSize: 14,
        color: '#606266',
        includeFontPadding: false,
    },
});
