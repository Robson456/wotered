import * as React from 'react';
import { ImageSourcePropType, ImageStyle, StyleProp, TextStyle, ViewStyle } from 'react-native';
interface RadioButtonProps {
    style?: StyleProp<ViewStyle>;
    icon?: RadioIcon;
    iconStyle?: StyleProp<ImageStyle>;
    text?: string;
    textStyle?: StyleProp<TextStyle>;
    textCheckedStyle?: StyleProp<TextStyle>;
    id?: number;
    value?: any;
    checked?: boolean;
    disabled?: boolean;
    onChecked?: (checked: boolean, pressed: boolean) => void;
}
interface RadioIcon {
    normal: ImageSourcePropType;
    checked: ImageSourcePropType;
}
interface RadioButtonState {
    checked: boolean;
}
export default class RadioButton extends React.Component<RadioButtonProps, RadioButtonState> {
    private parent?;
    constructor(props: RadioButtonProps);
    shouldComponentUpdate(nextProps: Readonly<RadioButtonProps>, nextState: Readonly<RadioButtonState>, nextContext: any): boolean;
    render(): JSX.Element;
    renderRadio(checked?: boolean): JSX.Element | undefined;
    renderText(checked?: boolean): JSX.Element | undefined;
    getContextInfo(): JSX.Element;
}
interface RadioGroupProps {
    style?: StyleProp<ViewStyle>;
    icon?: RadioIcon;
    iconStyle?: StyleProp<ImageStyle>;
    textStyle?: StyleProp<TextStyle>;
    textCheckedStyle?: StyleProp<TextStyle>;
    checkedId?: number;
    onChecked?: (id: number, value: any) => void;
}
interface RadioGroupState {
    checkedId?: number;
}
export declare class RadioGroup extends React.Component<RadioGroupProps, RadioGroupState> {
    constructor(props: RadioGroupProps);
    onCheck(id: number, value: any): void;
    shouldComponentUpdate(nextProps: Readonly<RadioGroupProps>, nextState: Readonly<RadioGroupState>, nextContext: any): boolean;
    render(): JSX.Element;
    renderChildren(): {}[] | null | undefined;
}
export {};
